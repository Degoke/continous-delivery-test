version: 2.1

commands:

  destroy_enviroment:
    steps:
    - run:
        name: Destroy enviroment
        when: on_fail
        command: |
          aws cloudformation delete-stack --stack-name testStack c-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

  configure_infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:b6:c4:96:c4:2c:31:e8:dc:34:4e:83:54:6b:50:73"]
      
      - run:
          name: install openssh
          command: |
            apk add --update openssh-server

      - run:
          name: Install Ansible
          command: | 
            apk add --update ansible

      - run:
          name: Run playbook and configure server
          command: |
            ansible-playbook -i inventory.txt main.yml
        
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create cloudformation stack
          command: |
            aws cloudformation create-stack \
            --template-body file://cloudformation/template.yml \
            --stack-name testStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --region us-east-1

  smoke_test:
    docker: 
      - image: amazon/aws-cli
    steps:
      # - run: apk add --update curl
      - run:
          name: test job
          command: return 1
          # command: |
          #   URL="https://blog.udacity.com/"
          #   if curl -s --head ${URL}
          #   then
          #     return 0
          #   else
          #     return 1
          #   fi
      - destroy_enviroment

  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket template
          command: |
            aws cloudformation create-stack \
            --template-body file://cloudformation/cloudfront.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=MyBucketName,ParameterValue="myBucket-${CIRCLE_WORKFLOW_ID:0:7}"                            
            --region us-east-1

      - run: aws s3 sync . s3://myBucket${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save old pipeline Id resonsible for last release
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront script
          command: |
            aws cloudformation update-stack \ 
            --template-body file://cloudformation/cloudfront.yml \
            --stack-name production-distro \
            --parameters ParameterKey=PipelineID,ParameterValue="myBucket-${CIRCLE_WORKFLOW_ID:0:7"} \
            --region us-east-1

  clean_up_old_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: destroy previous s3 bucket and stack
          command: |
            export OldBucketID=$(cat ~textfile.txt)
            aws s3 rm "s3://${OldBucketID" --recursive

workflows:

  my_workflow:
    jobs:
      - create_and_deploy_frontend
      - promote_to_production:
          requires:
            - create_and_deploy_frontend
      - get_last_deployment_id
      - clean_up_old_frontend:
          requires:
            - get_last_deployment_id
            - promote_to_production
